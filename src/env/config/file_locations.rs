// Pi-hole: A black hole for Internet advertisements
// (c) 2019 Pi-hole, LLC (https://pi-hole.net)
// Network-wide ad blocking via your own hardware.
//
// API
// File Locations Config
//
// This file is copyright under the latest version of the EUPL.
// Please see LICENSE file for your rights under this license.

use crate::env::PiholeFile;
use std::path::Path;

/// Defines the deserialization of the "file_locations" section of the config
/// file. The default functions are generated by `default!`.
#[derive(Deserialize, Clone, Debug)]
pub struct Files {
    #[serde(default = "default_dnsmasq_config")]
    dnsmasq_config: String,
    #[serde(default = "default_whitelist")]
    whitelist: String,
    #[serde(default = "default_blacklist")]
    blacklist: String,
    #[serde(default = "default_regexlist")]
    regexlist: String,
    #[serde(default = "default_setup_vars")]
    setup_vars: String,
    #[serde(default = "default_ftl_config")]
    ftl_config: String,
    #[serde(default = "default_local_versions")]
    local_versions: String,
    #[serde(default = "default_local_branches")]
    local_branches: String,
    #[serde(default = "default_audit_log")]
    audit_log: String,
    #[serde(default = "default_gravity")]
    gravity: String,
    #[serde(default = "default_gravity_backup")]
    gravity_backup: String,
    #[serde(default = "default_black_list")]
    black_list: String,
    #[serde(default = "default_black_list_backup")]
    black_list_backup: String
}

impl Default for Files {
    fn default() -> Self {
        Files {
            dnsmasq_config: default_dnsmasq_config(),
            whitelist: default_whitelist(),
            blacklist: default_blacklist(),
            regexlist: default_regexlist(),
            setup_vars: default_setup_vars(),
            ftl_config: default_ftl_config(),
            local_versions: default_local_versions(),
            local_branches: default_local_branches(),
            audit_log: default_audit_log(),
            gravity: default_gravity(),
            gravity_backup: default_gravity_backup(),
            black_list: default_black_list(),
            black_list_backup: default_black_list_backup()
        }
    }
}

impl Files {
    pub fn is_valid(&self) -> bool {
        [
            &self.dnsmasq_config,
            &self.whitelist,
            &self.blacklist,
            &self.regexlist,
            &self.setup_vars,
            &self.ftl_config,
            &self.local_versions,
            &self.local_branches,
            &self.audit_log,
            &self.gravity,
            &self.gravity_backup,
            &self.black_list,
            &self.black_list_backup
        ]
        .iter()
        .all(|file| Path::new(file).is_absolute())
    }

    /// Get the configured location of a file
    pub fn get(&self, file: PiholeFile) -> &str {
        match file {
            PiholeFile::DnsmasqConfig => &self.dnsmasq_config,
            PiholeFile::Whitelist => &self.whitelist,
            PiholeFile::Blacklist => &self.blacklist,
            PiholeFile::Regexlist => &self.regexlist,
            PiholeFile::SetupVars => &self.setup_vars,
            PiholeFile::FtlConfig => &self.ftl_config,
            PiholeFile::LocalVersions => &self.local_versions,
            PiholeFile::LocalBranches => &self.local_branches,
            PiholeFile::AuditLog => &self.audit_log,
            PiholeFile::Gravity => &self.gravity,
            PiholeFile::GravityBackup => &self.gravity_backup,
            PiholeFile::BlackList => &self.black_list,
            PiholeFile::BlackListBackup => &self.black_list_backup
        }
    }
}

/// Create an `fn() -> String` default function for deserialization
macro_rules! default {
    ($fn_name:ident, $variant:ident) => {
        fn $fn_name() -> String {
            PiholeFile::$variant.default_location().to_owned()
        }
    };
}

default!(default_dnsmasq_config, DnsmasqConfig);
default!(default_whitelist, Whitelist);
default!(default_blacklist, Blacklist);
default!(default_regexlist, Regexlist);
default!(default_setup_vars, SetupVars);
default!(default_ftl_config, FtlConfig);
default!(default_local_versions, LocalVersions);
default!(default_local_branches, LocalBranches);
default!(default_audit_log, AuditLog);
default!(default_gravity, Gravity);
default!(default_gravity_backup, GravityBackup);
default!(default_black_list, BlackList);
default!(default_black_list_backup, BlackListBackup);

#[cfg(test)]
mod test {
    use super::Files;

    /// The default file locations are valid
    #[test]
    fn valid_files() {
        let files = Files::default();

        assert!(files.is_valid());
    }

    /// An invalid file location flags the config as invalid
    #[test]
    fn invalid_file() {
        let files = Files {
            setup_vars: "!asd?f".to_owned(),
            ..Files::default()
        };

        assert!(!files.is_valid());
    }
}
